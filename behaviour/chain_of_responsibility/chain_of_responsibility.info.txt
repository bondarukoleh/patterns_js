Chain of Responsibility is a behavioral design pattern that lets you pass requests along a chain of handlers.
Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the
chain.

Chain of Responsibility relies on transforming particular behaviors into stand-alone objects called handlers.
Each check should be extracted to its own class with a single method that performs the check.
The request, along with its data, is passed to this method as an argument.

The pattern suggests that you link these handlers into a chain.
Each linked handler has a field for storing a reference to the next handler in the chain.
In addition to processing a request, handlers pass the request further along the chain.
The request travels along the chain until all handlers have had a chance to process it.

Best part: a handler can decide not to pass the request further down the chain and effectively stop any further
processing.

However, there’s a slightly different approach (and it’s a bit more canonical) in which, upon receiving a request,
a handler decides whether it can process it. If it can, it doesn’t pass the request any further. So it’s either only
one handler that processes the request or none at all. This approach is very common when dealing with events in stacks
of elements within a graphical user interface.

It’s crucial that all handler classes implement the same interface.
Each concrete handler should only care about the following one having the execute method.
This way you can compose chains at runtime, using various handlers without coupling your code to their concrete classes.