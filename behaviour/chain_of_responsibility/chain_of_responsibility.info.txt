Chain of Responsibility is a behavioral design pattern that lets you pass requests along a chain of handlers.
Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the
chain.

Chain of Responsibility relies on transforming particular behaviors into stand-alone objects called handlers.
Each check should be extracted to its own class with a single method that performs the check.
The request, along with its data, is passed to this method as an argument.

The pattern suggests that you link these handlers into a chain.
Each linked handler has a field for storing a reference to the next handler in the chain.
In addition to processing a request, handlers pass the request further along the chain.
The request travels along the chain until all handlers have had a chance to process it.

Best part: a handler can decide not to pass the request further down the chain and effectively stop any further
processing.

However, there’s a slightly different approach (and it’s a bit more canonical) in which, upon receiving a request,
a handler decides whether it can process it. If it can, it doesn’t pass the request any further. So it’s either only
one handler that processes the request or none at all. This approach is very common when dealing with events in stacks
of elements within a graphical user interface.

It’s crucial that all handler classes implement the same interface.
Each concrete handler should only care about the following one having the execute method.
This way you can compose chains at runtime, using various handlers without coupling your code to their concrete classes.

The pattern lets you link several handlers into one chain and, upon receiving a request, “ask” each handler whether it can
process it. This way all handlers get a chance to process the request.

Use the pattern when it’s essential to execute several handlers in a particular order.

Use the CoR pattern when the set of handlers and their order are supposed to change at runtime.

=======================================================================================================================
Chain of Responsibility, Command, Mediator and Observer address various ways of connecting senders and receivers of
requests:

Chain of Responsibility passes a request sequentially along a dynamic chain of potential receivers until one of them
handles it.
Command establishes unidirectional connections between senders and receivers.
Mediator eliminates direct connections between senders and receivers, forcing them to communicate indirectly via a
mediator object.
Observer lets receivers dynamically subscribe to and unsubscribe from receiving requests.
Chain of Responsibility is often used in conjunction with Composite. In this case, when a leaf component gets a request,
it may pass it through the chain of all of the parent components down to the root of the object tree.

Handlers in Chain of Responsibility can be implemented as Commands. In this case, you can execute a lot of different
operations over the same context object, represented by a request.
However, there’s another approach, where the request itself is a Command object. In this case, you can execute the same
operation in a series of different contexts linked into a chain.

Chain of Responsibility and Decorator have very similar class structures. Both patterns rely on recursive composition to
pass the execution through a series of objects. However, there are several crucial differences.
The CoR handlers can execute arbitrary operations independently of each other. They can also stop passing the request
further at any point. On the other hand, various Decorators can extend the object’s behavior while keeping it consistent
with the base interface. In addition, decorators are not allowed to break the flow of the request.