State is a behavioral design pattern that lets an object alter its behavior when its internal state changes.
It appears as if the object changed its class.

The main idea is that, at any given moment, there’s a finite number of states which a program can be in. Within any
unique state, the program behaves differently, and the program can be switched from one state to another instantaneously.
However, depending on a current state, the program may or may not switch to certain other states. These switching rules,
called transitions, are also finite and predetermined.

Context -- exposes an interface that supports clients of the service, maintains a reference to a state object that
defines the current state, allows State objects to change its current state to a different state
State -- encapsulates the state values and associated behavior of the state

This structure may look similar to the Strategy pattern, but there’s one key difference. In the State pattern, the
particular states may be aware of each other and initiate transitions from one state to another, whereas strategies
almost never know about each other.

Use the State pattern when you have an object that behaves differently depending on its current state, the number of
states is enormous, and the state-specific code changes frequently.
The pattern suggests that you extract all state-specific code into a set of distinct classes. As a result, you can add
new states or change existing ones independently of each other, reducing the maintenance cost.

Use the pattern when you have a class polluted with massive conditionals that alter how the class behaves according
to the current values of the class’s fields.

Use State when you have a lot of duplicate code across similar states and transitions of a condition-based state machine.

====================================================================================================================
Bridge, State, Strategy (and to some degree Adapter) have very similar structures. Indeed, all of these patterns are
based on composition, which is delegating work to other objects. However, they all solve different problems.

State can be considered as an extension of Strategy. Both patterns are based on composition: they change the behavior
of the context by delegating some work to helper objects. Strategy makes these objects completely independent and
unaware of each other. However, State doesn’t restrict dependencies between concrete states, letting them alter the
state of the context at will.

