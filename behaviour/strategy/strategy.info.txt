Strategy is a behavioral design pattern that lets you define a family of algorithms, put each of them into a separate
class, and make them objects interchangeable. Strategy lets the algorithm vary independently from clients that use it.

The Strategy pattern encapsulates alternative algorithms (or strategies) for a particular task. It allows a method to be
swapped out at runtime by any other method (strategy) without the client realizing it. Essentially, Strategy is a group
of algorithms that are interchangeable.

Context:
 maintains a reference to the current Strategy object
 supports interface to allow clients to request Strategy calculations
 allows clients to change Strategy
Strategy:
 implements the algorithm using the Strategy interface

The Strategy pattern suggests that you take a class that does something specific in a lot of different ways and extract
all of these algorithms into separate classes called strategies.

The original class, called context, must have a field for storing a reference to one of the strategies. The context
delegates the work to a linked strategy object instead of executing it on its own.

The context isn’t responsible for selecting an appropriate algorithm for the job. Instead, the client passes the desired
strategy to the context. In fact, the context doesn’t know much about strategies. It works with all strategies through
the same generic interface, which only exposes a single method for triggering the algorithm encapsulated within the
selected strategy.

This way the context becomes independent of concrete strategies, so you can add new algorithms or modify existing ones
without changing the code of the context or other strategies.

