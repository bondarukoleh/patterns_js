Flyweight is a structural design pattern that lets you fit more objects into the available amount of RAM by sharing
common parts of state between multiple objects instead of keeping all of the data in each object.

The constant data of an object is usually called the "intrinsic" state. It lives within the object; other objects can
only read it, not change it. The rest of the object’s state, often altered “from the outside” by other objects, is
called the "extrinsic" state.

The Flyweight pattern suggests that you stop storing the extrinsic state inside the object. Instead, you should pass
this state to specific methods which rely on it. Only the intrinsic state stays within the object, letting you reuse
it in different contexts. As a result, you’d need fewer of these objects since they only differ in the intrinsic state,
which has much fewer variations than the extrinsic.

An object that only stores the intrinsic state is called a "flyweight".

Since the same flyweight object can be used in different contexts, you have to make sure that its state can’t be
modified. A flyweight should initialize its state just once, via constructor parameters. It shouldn’t expose any setters
or public fields to other objects.

For more convenient access to various flyweights, you can create a factory method that manages a pool of existing
flyweight objects. The method accepts the intrinsic state of the desired flyweight from a client, looks for an existing
flyweight object matching this state, and returns it if it was found. If not, it creates a new flyweight and adds it to
the pool.

The benefit of applying the pattern depends heavily on how and where it’s used. It’s most useful when:
an application needs to spawn a huge number of similar objects
this drains all available RAM on a target device
the objects contain duplicate states which can be extracted and shared between multiple objects

Flyweight would resemble Singleton if you somehow managed to reduce all shared states of the objects to just one
flyweight object. But:
There should be only one Singleton instance, whereas a Flyweight class can have multiple instances with different
intrinsic states.
The Singleton object can be mutable. Flyweight objects are immutable.

Flyweight shows how to make lots of little objects, whereas Facade shows how to make a single object that represents an
entire subsystem.

Can be used with Composite.