Adapter is a structural design pattern that allows objects with incompatible interfaces to collaborate.
An adapter wraps one of the objects to hide the complexity of conversion happening behind the scenes.
The wrapped object isn’t even aware of the adapter.
Sometimes it’s even possible to create a two-way adapter that can convert the calls in both directions.

Bridge is usually designed up-front, letting you develop parts of an application independently of each other.
 On the other hand, Adapter is commonly used with an existing app to make some otherwise-incompatible classes work
 together nicely.

Adapter changes the interface of an existing object, while Decorator enhances an object without changing its interface.
 In addition, Decorator supports recursive composition, which isn’t possible when you use Adapter.

Adapter provides a different interface to the wrapped object, Proxy provides it with the same interface, and Decorator
 provides it with an enhanced interface.

Facade defines a new interface for existing objects, whereas Adapter tries to make the existing interface usable.
 Adapter usually wraps just one object, while Facade works with an entire subsystem of objects.

Bridge, State, Strategy (and to some degree Adapter) have very similar structures. Indeed, all of these patterns are
 based on composition, which is delegating work to other objects. However, they all solve different problems. A pattern
 isn’t just a recipe for structuring your code in a specific way. It can also communicate to other developers the
 problem the pattern solves.